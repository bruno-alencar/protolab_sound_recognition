<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="3" name="pytest" skips="0" tests="14" time="116.844"><testcase classname="tests.test_bell_detection" name="test_classifier_simple" time="0.000419139862061"><system-out>CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
</system-out></testcase><testcase classname="tests.test_bell_detection" name="test_bell_detection[False]" time="3.97396802902"><system-out>CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-025-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-023-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-024-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
</system-out></testcase><testcase classname="tests.test_bell_detection" name="test_bell_detection[True]" time="14.6023161411"><system-out>CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-025-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-023-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-024-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-025-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-023-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-024-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
Exception fs (44100) != self.fs (48000.0) detected on /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-025-Romeo.wav
Exception fs (44100) != self.fs (48000.0) detected on /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-023-Romeo.wav
Exception fs (44100) != self.fs (48000.0) detected on /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-024-Romeo.wav
CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-025-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-023-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-024-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
confidence threshold are {&apos;FireAlarmFr&apos;: 0.26000000000000001, &apos;Applause&apos;: 0.24212970566518782, &apos;TacTac&apos;: 0.83999999999999997, &apos;DoorBell01&apos;: 0.60999999999999999, &apos;Whistle&apos;: 0.69000000000000006, &apos;DoorBell02&apos;: 0.24212970566518782, &apos;DeskBell&apos;: 0.32000000000000001}
confidence coefficients are {&apos;FireAlarmFr&apos;: 3.4615384615384617, &apos;Applause&apos;: 3.7170160411647393, &apos;TacTac&apos;: 1.0714285714285714, &apos;DoorBell01&apos;: 1.4754098360655739, &apos;Whistle&apos;: 1.3043478260869565, &apos;DoorBell02&apos;: 3.7170160411647393, &apos;DeskBell&apos;: 2.8125}
</system-out></testcase><testcase classname="tests.test_flask_resful_app.FlaskrTestCase" name="test_empty" time="5.91278076172e-05"/><testcase classname="tests.test_speed_performance.TestSpeed" name="test_speed" time="6.3437359333"><system-out>CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-025-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-023-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-024-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-025-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-023-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-024-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
Exception fs (44100) != self.fs (48000.0) detected on /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-025-Romeo.wav
Exception fs (44100) != self.fs (48000.0) detected on /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-023-Romeo.wav
Exception fs (44100) != self.fs (48000.0) detected on /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-024-Romeo.wav
CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-025-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-023-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-024-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
confidence threshold are {&apos;FireAlarmFr&apos;: 0.26000000000000001, &apos;Applause&apos;: 0.23822510674740674, &apos;TacTac&apos;: 0.83999999999999997, &apos;DoorBell01&apos;: 0.60999999999999999, &apos;Whistle&apos;: 0.68000000000000005, &apos;DoorBell02&apos;: 0.23822510674740674, &apos;DeskBell&apos;: 0.33000000000000002}
confidence coefficients are {&apos;FireAlarmFr&apos;: 3.4615384615384617, &apos;Applause&apos;: 3.7779393292675993, &apos;TacTac&apos;: 1.0714285714285714, &apos;DoorBell01&apos;: 1.4754098360655739, &apos;Whistle&apos;: 1.3235294117647058, &apos;DoorBell02&apos;: 3.7779393292675993, &apos;DeskBell&apos;: 2.727272727272727}
</system-out></testcase><testcase classname="tests.test_successive_detection.TestMultipleDetectionsDefaultDatasetWithCalibration" name="test_precision" time="0.000236988067627"><system-out>CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-025-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-023-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-024-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-025-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-023-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-024-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
Exception fs (44100) != self.fs (48000.0) detected on /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-025-Romeo.wav
Exception fs (44100) != self.fs (48000.0) detected on /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-023-Romeo.wav
Exception fs (44100) != self.fs (48000.0) detected on /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-024-Romeo.wav
CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-025-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-023-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-024-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
confidence threshold are {&apos;FireAlarmFr&apos;: 0.25, &apos;Applause&apos;: 0.24147898838033707, &apos;TacTac&apos;: 0.84999999999999998, &apos;DoorBell01&apos;: 0.62, &apos;Whistle&apos;: 0.68000000000000005, &apos;DoorBell02&apos;: 0.24147898838033707, &apos;DeskBell&apos;: 0.32000000000000001}
confidence coefficients are {&apos;FireAlarmFr&apos;: 3.6, &apos;Applause&apos;: 3.7270323436276427, &apos;TacTac&apos;: 1.0588235294117647, &apos;DoorBell01&apos;: 1.4516129032258065, &apos;Whistle&apos;: 1.3235294117647058, &apos;DoorBell02&apos;: 3.7270323436276427, &apos;DeskBell&apos;: 2.8125}
ignoring labels [&apos;ClapHand&apos;, &apos;SmokeDetector&apos;, &apos;HumanCaressHead&apos;, &apos;FakeSneeze&apos;, &apos;(romeo speaking)&apos;, &apos;RobotNoisePushed&apos;, &apos;(opening a door)&apos;, &apos;ShutDoor&apos;, &apos;(Opening a door)&apos;, &apos;NoisePaper&apos;, &apos;ToyPig&apos;, &apos;HumanTapHead&apos;, &apos;HumanScratchHead&apos;, &apos;RobotNoiseMoving&apos;, &apos;BlowNose&apos;, &apos;Laugh&apos;, &apos;ToyChicken&apos;, &apos;NOTHING&apos;, &apos;ToyMaracas&apos;, &apos;ToyGiraffe&apos;], not present in learning dataset
</system-out><system-err>/home/lgeorge/anaconda/lib/python2.7/site-packages/sklearn/metrics/classification.py:958: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.
  &apos;precision&apos;, &apos;predicted&apos;, average, warn_for)
/home/lgeorge/anaconda/lib/python2.7/site-packages/sklearn/metrics/classification.py:960: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples.
  &apos;recall&apos;, &apos;true&apos;, average, warn_for)
/home/lgeorge/anaconda/lib/python2.7/site-packages/sklearn/metrics/classification.py:958: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.
  &apos;precision&apos;, &apos;predicted&apos;, average, warn_for)
/home/lgeorge/anaconda/lib/python2.7/site-packages/sklearn/metrics/classification.py:960: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples.
  &apos;recall&apos;, &apos;true&apos;, average, warn_for)
</system-err></testcase><testcase classname="tests.test_successive_detection.TestMultipleDetectionsDefaultDatasetWithCalibration" name="test_recall" time="0.000672817230225"><failure message="AssertionError: 
Arrays are not less-ordered
labels considered are [&apos;FireAlarmFr&apos;, &apos;TacTac&apos;, &apos;DoorBell01&apos;, &apos;DeskBell&apos;] predicted are [&apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;], expected are [&apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;BlowNose&apos;, &apos;ClapHand&apos;, &apos;ClapHand&apos;, &apos;DoorBell01&apos;, &apos;FakeSneeze&apos;, &apos;HumanCaressHead&apos;, &apos;HumanScratchHead&apos;, &apos;HumanTapHead&apos;, &apos;Laugh&apos;, &apos;NoisePaper&apos;, &apos;RobotNoiseMoving&apos;, &apos;RobotNoisePushed&apos;, &apos;SmokeDetector&apos;, &apos;ShutDoor&apos;, &apos;ShutDoor&apos;, &apos;(Opening a door)&apos;, &apos;ShutDoor&apos;, &apos;TacTac&apos;, &apos;ToyGiraffe&apos;, &apos;ToyMaracas&apos;, &apos;ToyPig&apos;, &apos;ClapHand&apos;, &apos;DoorBell01&apos;, &apos;FakeSneeze&apos;, &apos;(romeo speaking)&apos;, &apos;HumanCaressHead&apos;, &apos;HumanScratchHead&apos;, &apos;HumanTapHead&apos;, &apos;Laugh&apos;, &apos;NoisePaper&apos;, &apos;RobotNoiseMoving&apos;, &apos;RobotNoisePushed&apos;, &apos;ShutDoor&apos;, &apos;(opening a door)&apos;, &apos;ShutDoor&apos;, &apos;ShutDoor&apos;, &apos;ShutDoor&apos;, &apos;SmokeDetector&apos;, &apos;TacTac&apos;, &apos;ToyPig&apos;, &apos;ToyMaracas&apos;, &apos;ToyGiraffe&apos;, &apos;ToyChicken&apos;, &apos;DoorBell01&apos;, &apos;ToyPig&apos;, &apos;ToyGiraffe&apos;, &apos;ToyMaracas&apos;, &apos;ToyPig&apos;, &apos;ToyChicken&apos;, &apos;FakeSneeze&apos;, &apos;DoorBell01&apos;, &apos;ToyMaracas&apos;, &apos;ToyPig&apos;, &apos;ShutDoor&apos;, &apos;ToyGiraffe&apos;, &apos;ToyChicken&apos;, &apos;ClapHand&apos;]
(mismatch 50.0%)
 x: array(0.7)
 y: array([ 1.,  0.,  0.,  1.])">self = &lt;tests.test_successive_detection.TestMultipleDetectionsDefaultDatasetWithCalibration testMethod=test_recall&gt;

    def test_recall(self):
        # for recall we also ignore labels not present in the test_wav_file
        print(&quot;ignoring labels %s, not present in learning dataset&quot; % str(self.labels_to_ignore))
        print(&quot;considering only labels present in wavfile %s&quot; % str(self.labels_present_in_wavfile))
        labels_to_ignore = self.labels_to_ignore + [label for label in self.labels if label not in self.labels_present_in_wavfile]
        labels_to_consider = [l for l in self.labels if l not in labels_to_ignore]
        labels_to_consider_index = [num for (num, val) in enumerate(self.labels) if val in labels_to_consider]
        # we use assert array less because it provide a pecent mismatch, easier to read.. it&apos;s equivalent to checking all values above min_recall
&gt;       np.testing.assert_array_less(self.min_recall, self.recalls[labels_to_consider_index], &quot;labels considered are {} predicted are {}, expected are {}&quot;.format(self.labels_to_consider, self.predicted, self.expected))

test_successive_detection.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lgeorge/anaconda/lib/python2.7/site-packages/numpy/testing/utils.py:913: in assert_array_less
    header=&apos;Arrays are not less-ordered&apos;)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

comparison = &lt;built-in function __lt__&gt;, x = array(0.7), y = array([ 1.,  0.,  0.,  1.])
err_msg = &quot;labels considered are [&apos;FireAlarmFr&apos;, &apos;TacTac&apos;, &apos;DoorBell01&apos;, &apos;DeskBell&apos;] predicted are [&apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;... &apos;ToyChicken&apos;, &apos;FakeSneeze&apos;, &apos;DoorBell01&apos;, &apos;ToyMaracas&apos;, &apos;ToyPig&apos;, &apos;ShutDoor&apos;, &apos;ToyGiraffe&apos;, &apos;ToyChicken&apos;, &apos;ClapHand&apos;]&quot;, verbose = True
header = &apos;Arrays are not less-ordered&apos;, precision = 6

    def assert_array_compare(comparison, x, y, err_msg=&apos;&apos;, verbose=True,
                             header=&apos;&apos;, precision=6):
        from numpy.core import array, isnan, isinf, any, all, inf
        x = array(x, copy=False, subok=True)
        y = array(y, copy=False, subok=True)
    
        def isnumber(x):
            return x.dtype.char in &apos;?bhilqpBHILQPefdgFDG&apos;
    
        def chk_same_position(x_id, y_id, hasval=&apos;nan&apos;):
            &quot;&quot;&quot;Handling nan/inf: check that x and y have the nan/inf at the same
            locations.&quot;&quot;&quot;
            try:
                assert_array_equal(x_id, y_id)
            except AssertionError:
                msg = build_err_msg([x, y],
                                    err_msg + &apos;\nx and y %s location mismatch:&apos; \
                                    % (hasval), verbose=verbose, header=header,
                                    names=(&apos;x&apos;, &apos;y&apos;), precision=precision)
                raise AssertionError(msg)
    
        try:
            cond = (x.shape==() or y.shape==()) or x.shape == y.shape
            if not cond:
                msg = build_err_msg([x, y],
                                    err_msg
                                    + &apos;\n(shapes %s, %s mismatch)&apos; % (x.shape,
                                                                      y.shape),
                                    verbose=verbose, header=header,
                                    names=(&apos;x&apos;, &apos;y&apos;), precision=precision)
                if not cond :
                    raise AssertionError(msg)
    
            if isnumber(x) and isnumber(y):
                x_isnan, y_isnan = isnan(x), isnan(y)
                x_isinf, y_isinf = isinf(x), isinf(y)
    
                # Validate that the special values are in the same place
                if any(x_isnan) or any(y_isnan):
                    chk_same_position(x_isnan, y_isnan, hasval=&apos;nan&apos;)
                if any(x_isinf) or any(y_isinf):
                    # Check +inf and -inf separately, since they are different
                    chk_same_position(x == +inf, y == +inf, hasval=&apos;+inf&apos;)
                    chk_same_position(x == -inf, y == -inf, hasval=&apos;-inf&apos;)
    
                # Combine all the special values
                x_id, y_id = x_isnan, y_isnan
                x_id |= x_isinf
                y_id |= y_isinf
    
                # Only do the comparison if actual values are left
                if all(x_id):
                    return
    
                if any(x_id):
                    val = comparison(x[~x_id], y[~y_id])
                else:
                    val = comparison(x, y)
            else:
                val = comparison(x, y)
    
            if isinstance(val, bool):
                cond = val
                reduced = [0]
            else:
                reduced = val.ravel()
                cond = reduced.all()
                reduced = reduced.tolist()
            if not cond:
                match = 100-100.0*reduced.count(1)/len(reduced)
                msg = build_err_msg([x, y],
                                    err_msg
                                    + &apos;\n(mismatch %s%%)&apos; % (match,),
                                    verbose=verbose, header=header,
                                    names=(&apos;x&apos;, &apos;y&apos;), precision=precision)
                if not cond :
&gt;                   raise AssertionError(msg)
E                   AssertionError: 
E                   Arrays are not less-ordered
E                   labels considered are [&apos;FireAlarmFr&apos;, &apos;TacTac&apos;, &apos;DoorBell01&apos;, &apos;DeskBell&apos;] predicted are [&apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;], expected are [&apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;BlowNose&apos;, &apos;ClapHand&apos;, &apos;ClapHand&apos;, &apos;DoorBell01&apos;, &apos;FakeSneeze&apos;, &apos;HumanCaressHead&apos;, &apos;HumanScratchHead&apos;, &apos;HumanTapHead&apos;, &apos;Laugh&apos;, &apos;NoisePaper&apos;, &apos;RobotNoiseMoving&apos;, &apos;RobotNoisePushed&apos;, &apos;SmokeDetector&apos;, &apos;ShutDoor&apos;, &apos;ShutDoor&apos;, &apos;(Opening a door)&apos;, &apos;ShutDoor&apos;, &apos;TacTac&apos;, &apos;ToyGiraffe&apos;, &apos;ToyMaracas&apos;, &apos;ToyPig&apos;, &apos;ClapHand&apos;, &apos;DoorBell01&apos;, &apos;FakeSneeze&apos;, &apos;(romeo speaking)&apos;, &apos;HumanCaressHead&apos;, &apos;HumanScratchHead&apos;, &apos;HumanTapHead&apos;, &apos;Laugh&apos;, &apos;NoisePaper&apos;, &apos;RobotNoiseMoving&apos;, &apos;RobotNoisePushed&apos;, &apos;ShutDoor&apos;, &apos;(opening a door)&apos;, &apos;ShutDoor&apos;, &apos;ShutDoor&apos;, &apos;ShutDoor&apos;, &apos;SmokeDetector&apos;, &apos;TacTac&apos;, &apos;ToyPig&apos;, &apos;ToyMaracas&apos;, &apos;ToyGiraffe&apos;, &apos;ToyChicken&apos;, &apos;DoorBell01&apos;, &apos;ToyPig&apos;, &apos;ToyGiraffe&apos;, &apos;ToyMaracas&apos;, &apos;ToyPig&apos;, &apos;ToyChicken&apos;, &apos;FakeSneeze&apos;, &apos;DoorBell01&apos;, &apos;ToyMaracas&apos;, &apos;ToyPig&apos;, &apos;ShutDoor&apos;, &apos;ToyGiraffe&apos;, &apos;ToyChicken&apos;, &apos;ClapHand&apos;]
E                   (mismatch 50.0%)
E                    x: array(0.7)
E                    y: array([ 1.,  0.,  0.,  1.])

/home/lgeorge/anaconda/lib/python2.7/site-packages/numpy/testing/utils.py:665: AssertionError</failure><system-out>ignoring labels [&apos;ClapHand&apos;, &apos;SmokeDetector&apos;, &apos;HumanCaressHead&apos;, &apos;FakeSneeze&apos;, &apos;(romeo speaking)&apos;, &apos;RobotNoisePushed&apos;, &apos;(opening a door)&apos;, &apos;ShutDoor&apos;, &apos;(Opening a door)&apos;, &apos;NoisePaper&apos;, &apos;ToyPig&apos;, &apos;HumanTapHead&apos;, &apos;HumanScratchHead&apos;, &apos;RobotNoiseMoving&apos;, &apos;BlowNose&apos;, &apos;Laugh&apos;, &apos;ToyChicken&apos;, &apos;NOTHING&apos;, &apos;ToyMaracas&apos;, &apos;ToyGiraffe&apos;], not present in learning dataset
considering only labels present in wavfile set([&apos;(opening a door)&apos;, &apos;ClapHand&apos;, &apos;HumanCaressHead&apos;, &apos;ShutDoor&apos;, &apos;(Opening a door)&apos;, &apos;NoisePaper&apos;, &apos;HumanTapHead&apos;, &apos;HumanScratchHead&apos;, &apos;RobotNoiseMoving&apos;, &apos;BlowNose&apos;, &apos;ToyMaracas&apos;, &apos;ToyGiraffe&apos;, &apos;FireAlarmFr&apos;, &apos;SmokeDetector&apos;, &apos;TacTac&apos;, &apos;DoorBell01&apos;, &apos;FakeSneeze&apos;, &apos;(romeo speaking)&apos;, &apos;RobotNoisePushed&apos;, &apos;ToyPig&apos;, &apos;DeskBell&apos;, &apos;Laugh&apos;, &apos;ToyChicken&apos;])
</system-out></testcase><testcase classname="tests.test_successive_detection.TestMultipleDetectionsDefaultDatasetWithCalibration" name="test_setup" time="5.69820404053e-05"/><testcase classname="tests.test_successive_detection.TestMultipleDetectionsWithCalibrationEuropythonDatasetFull" name="test_precision" time="0.000874042510986"><failure message="AssertionError: 
Arrays are not less-ordered
labels considered are [&apos;FireAlarmFr&apos;, &apos;ClapHand&apos;, &apos;SmokeDetector&apos;, &apos;TacTac&apos;, &apos;HumanCaressHead&apos;, &apos;DoorBell01&apos;, &apos;FakeSneeze&apos;, &apos;RobotNoisePushed&apos;, &apos;ShutDoor&apos;, &apos;NoisePaper&apos;, &apos;ToyPig&apos;, &apos;HumanScratchHead&apos;, &apos;RobotNoiseMoving&apos;, &apos;DeskBell&apos;, &apos;BlowNose&apos;, &apos;Laugh&apos;, &apos;ToyMaracas&apos;, &apos;ToyGiraffe&apos;], predicted are [&apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FakeSneeze&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FakeSneeze&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;SmokeDetector&apos;], expected are [&apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FakeSneeze&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FakeSneeze&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;BlowNose&apos;, &apos;ClapHand&apos;, &apos;ClapHand&apos;, &apos;DoorBell01&apos;, &apos;HumanCaressHead&apos;, &apos;HumanScratchHead&apos;, &apos;HumanTapHead&apos;, &apos;Laugh&apos;, &apos;NoisePaper&apos;, &apos;RobotNoiseMoving&apos;, &apos;RobotNoisePushed&apos;, &apos;SmokeDetector&apos;, &apos;ShutDoor&apos;, &apos;ShutDoor&apos;, &apos;(Opening a door)&apos;, &apos;ShutDoor&apos;, &apos;TacTac&apos;, &apos;ToyGiraffe&apos;, &apos;ToyPig&apos;, &apos;ClapHand&apos;, &apos;DoorBell01&apos;, &apos;FakeSneeze&apos;, &apos;(romeo speaking)&apos;, &apos;HumanCaressHead&apos;, &apos;HumanScratchHead&apos;, &apos;HumanTapHead&apos;, &apos;Laugh&apos;, &apos;NoisePaper&apos;, &apos;RobotNoiseMoving&apos;, &apos;RobotNoisePushed&apos;, &apos;ShutDoor&apos;, &apos;(opening a door)&apos;, &apos;ShutDoor&apos;, &apos;ShutDoor&apos;, &apos;ShutDoor&apos;, &apos;SmokeDetector&apos;, &apos;TacTac&apos;, &apos;ToyPig&apos;, &apos;ToyGiraffe&apos;, &apos;ToyChicken&apos;, &apos;DoorBell01&apos;, &apos;ToyPig&apos;, &apos;ToyGiraffe&apos;, &apos;ToyMaracas&apos;, &apos;ToyPig&apos;, &apos;ToyChicken&apos;, &apos;DoorBell01&apos;, &apos;ToyPig&apos;, &apos;ShutDoor&apos;, &apos;ToyGiraffe&apos;, &apos;ToyChicken&apos;, &apos;ClapHand&apos;, &apos;NOTHING&apos;]
(mismatch 5.55555555556%)
 x: array(0.7)
 y: array([ 1.,  1.,  0.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,
        1.,  1.,  1.,  1.,  1.])">self = &lt;tests.test_successive_detection.TestMultipleDetectionsWithCalibrationEuropythonDatasetFull testMethod=test_precision&gt;

    def test_precision(self):
        print(&quot;ignoring labels %s, not present in learning dataset&quot; % str(self.labels_to_ignore))
        for index in self.labels_to_consider_index:
            if self.precisions[index] == 0 and self.labels[index] not in self.predicted:
                self.precisions[index] = 1.  # MY precision comprhension
&gt;       np.testing.assert_array_less(self.min_precision, self.precisions[self.labels_to_consider_index], &quot;labels considered are {}, predicted are {}, expected are {}&quot;.format(self.labels_to_consider, self.predicted, self.expected))

test_successive_detection.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lgeorge/anaconda/lib/python2.7/site-packages/numpy/testing/utils.py:913: in assert_array_less
    header=&apos;Arrays are not less-ordered&apos;)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

comparison = &lt;built-in function __lt__&gt;, x = array(0.7), y = array([ 1.,  1.,  0.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,
        1.,  1.,  1.,  1.,  1.])
err_msg = &quot;labels considered are [&apos;FireAlarmFr&apos;, &apos;ClapHand&apos;, &apos;SmokeDetector&apos;, &apos;TacTac&apos;, &apos;HumanCaressHead&apos;, &apos;DoorBell01&apos;, &apos;FakeSn...racas&apos;, &apos;ToyPig&apos;, &apos;ToyChicken&apos;, &apos;DoorBell01&apos;, &apos;ToyPig&apos;, &apos;ShutDoor&apos;, &apos;ToyGiraffe&apos;, &apos;ToyChicken&apos;, &apos;ClapHand&apos;, &apos;NOTHING&apos;]&quot;, verbose = True
header = &apos;Arrays are not less-ordered&apos;, precision = 6

    def assert_array_compare(comparison, x, y, err_msg=&apos;&apos;, verbose=True,
                             header=&apos;&apos;, precision=6):
        from numpy.core import array, isnan, isinf, any, all, inf
        x = array(x, copy=False, subok=True)
        y = array(y, copy=False, subok=True)
    
        def isnumber(x):
            return x.dtype.char in &apos;?bhilqpBHILQPefdgFDG&apos;
    
        def chk_same_position(x_id, y_id, hasval=&apos;nan&apos;):
            &quot;&quot;&quot;Handling nan/inf: check that x and y have the nan/inf at the same
            locations.&quot;&quot;&quot;
            try:
                assert_array_equal(x_id, y_id)
            except AssertionError:
                msg = build_err_msg([x, y],
                                    err_msg + &apos;\nx and y %s location mismatch:&apos; \
                                    % (hasval), verbose=verbose, header=header,
                                    names=(&apos;x&apos;, &apos;y&apos;), precision=precision)
                raise AssertionError(msg)
    
        try:
            cond = (x.shape==() or y.shape==()) or x.shape == y.shape
            if not cond:
                msg = build_err_msg([x, y],
                                    err_msg
                                    + &apos;\n(shapes %s, %s mismatch)&apos; % (x.shape,
                                                                      y.shape),
                                    verbose=verbose, header=header,
                                    names=(&apos;x&apos;, &apos;y&apos;), precision=precision)
                if not cond :
                    raise AssertionError(msg)
    
            if isnumber(x) and isnumber(y):
                x_isnan, y_isnan = isnan(x), isnan(y)
                x_isinf, y_isinf = isinf(x), isinf(y)
    
                # Validate that the special values are in the same place
                if any(x_isnan) or any(y_isnan):
                    chk_same_position(x_isnan, y_isnan, hasval=&apos;nan&apos;)
                if any(x_isinf) or any(y_isinf):
                    # Check +inf and -inf separately, since they are different
                    chk_same_position(x == +inf, y == +inf, hasval=&apos;+inf&apos;)
                    chk_same_position(x == -inf, y == -inf, hasval=&apos;-inf&apos;)
    
                # Combine all the special values
                x_id, y_id = x_isnan, y_isnan
                x_id |= x_isinf
                y_id |= y_isinf
    
                # Only do the comparison if actual values are left
                if all(x_id):
                    return
    
                if any(x_id):
                    val = comparison(x[~x_id], y[~y_id])
                else:
                    val = comparison(x, y)
            else:
                val = comparison(x, y)
    
            if isinstance(val, bool):
                cond = val
                reduced = [0]
            else:
                reduced = val.ravel()
                cond = reduced.all()
                reduced = reduced.tolist()
            if not cond:
                match = 100-100.0*reduced.count(1)/len(reduced)
                msg = build_err_msg([x, y],
                                    err_msg
                                    + &apos;\n(mismatch %s%%)&apos; % (match,),
                                    verbose=verbose, header=header,
                                    names=(&apos;x&apos;, &apos;y&apos;), precision=precision)
                if not cond :
&gt;                   raise AssertionError(msg)
E                   AssertionError: 
E                   Arrays are not less-ordered
E                   labels considered are [&apos;FireAlarmFr&apos;, &apos;ClapHand&apos;, &apos;SmokeDetector&apos;, &apos;TacTac&apos;, &apos;HumanCaressHead&apos;, &apos;DoorBell01&apos;, &apos;FakeSneeze&apos;, &apos;RobotNoisePushed&apos;, &apos;ShutDoor&apos;, &apos;NoisePaper&apos;, &apos;ToyPig&apos;, &apos;HumanScratchHead&apos;, &apos;RobotNoiseMoving&apos;, &apos;DeskBell&apos;, &apos;BlowNose&apos;, &apos;Laugh&apos;, &apos;ToyMaracas&apos;, &apos;ToyGiraffe&apos;], predicted are [&apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FakeSneeze&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FakeSneeze&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;SmokeDetector&apos;], expected are [&apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FakeSneeze&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FakeSneeze&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;BlowNose&apos;, &apos;ClapHand&apos;, &apos;ClapHand&apos;, &apos;DoorBell01&apos;, &apos;HumanCaressHead&apos;, &apos;HumanScratchHead&apos;, &apos;HumanTapHead&apos;, &apos;Laugh&apos;, &apos;NoisePaper&apos;, &apos;RobotNoiseMoving&apos;, &apos;RobotNoisePushed&apos;, &apos;SmokeDetector&apos;, &apos;ShutDoor&apos;, &apos;ShutDoor&apos;, &apos;(Opening a door)&apos;, &apos;ShutDoor&apos;, &apos;TacTac&apos;, &apos;ToyGiraffe&apos;, &apos;ToyPig&apos;, &apos;ClapHand&apos;, &apos;DoorBell01&apos;, &apos;FakeSneeze&apos;, &apos;(romeo speaking)&apos;, &apos;HumanCaressHead&apos;, &apos;HumanScratchHead&apos;, &apos;HumanTapHead&apos;, &apos;Laugh&apos;, &apos;NoisePaper&apos;, &apos;RobotNoiseMoving&apos;, &apos;RobotNoisePushed&apos;, &apos;ShutDoor&apos;, &apos;(opening a door)&apos;, &apos;ShutDoor&apos;, &apos;ShutDoor&apos;, &apos;ShutDoor&apos;, &apos;SmokeDetector&apos;, &apos;TacTac&apos;, &apos;ToyPig&apos;, &apos;ToyGiraffe&apos;, &apos;ToyChicken&apos;, &apos;DoorBell01&apos;, &apos;ToyPig&apos;, &apos;ToyGiraffe&apos;, &apos;ToyMaracas&apos;, &apos;ToyPig&apos;, &apos;ToyChicken&apos;, &apos;DoorBell01&apos;, &apos;ToyPig&apos;, &apos;ShutDoor&apos;, &apos;ToyGiraffe&apos;, &apos;ToyChicken&apos;, &apos;ClapHand&apos;, &apos;NOTHING&apos;]
E                   (mismatch 5.55555555556%)
E                    x: array(0.7)
E                    y: array([ 1.,  1.,  0.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,
E                           1.,  1.,  1.,  1.,  1.])

/home/lgeorge/anaconda/lib/python2.7/site-packages/numpy/testing/utils.py:665: AssertionError</failure><system-out>CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_allsounds.tar.gz?dl=0_directory/DeskBell/DeskBell-025-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_allsounds.tar.gz?dl=0_directory/DeskBell/DeskBell-023-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_allsounds.tar.gz?dl=0_directory/DeskBell/DeskBell-024-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_allsounds.tar.gz?dl=0_directory/DeskBell/DeskBell-025-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_allsounds.tar.gz?dl=0_directory/DeskBell/DeskBell-023-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_allsounds.tar.gz?dl=0_directory/DeskBell/DeskBell-024-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
Exception fs (44100) != self.fs (48000.0) detected on /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_allsounds.tar.gz?dl=0_directory/DeskBell/DeskBell-025-Romeo.wav
Exception fs (44100) != self.fs (48000.0) detected on /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_allsounds.tar.gz?dl=0_directory/DeskBell/DeskBell-023-Romeo.wav
Exception fs (44100) != self.fs (48000.0) detected on /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_allsounds.tar.gz?dl=0_directory/DeskBell/DeskBell-024-Romeo.wav
CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_allsounds.tar.gz?dl=0_directory/DeskBell/DeskBell-025-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_allsounds.tar.gz?dl=0_directory/DeskBell/DeskBell-023-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_allsounds.tar.gz?dl=0_directory/DeskBell/DeskBell-024-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
confidence threshold are {&apos;DoorBell01&apos;: 0.33000000000000002, &apos;ShutDoor&apos;: 0.63, &apos;DoorBell02&apos;: 0.11539590133977715, &apos;FireAlarmFr&apos;: 0.11539590133977715, &apos;ApplauseLight&apos;: 0.11539590133977715, &apos;NoisePaper&apos;: 0.11539590133977715, &apos;ClapHand&apos;: 0.52000000000000002, &apos;ToyPig&apos;: 0.72999999999999998, &apos;SmokeDetector&apos;: 0.11539590133977715, &apos;HumanScratchHead&apos;: 0.62, &apos;TacTac&apos;: 0.47999999999999998, &apos;HumanCaressHead&apos;: 0.51000000000000001, &apos;RobotNoiseMoving&apos;: 0.34000000000000002, &apos;Whistle&apos;: 0.29999999999999999, &apos;FakeSneeze&apos;: 0.28999999999999998, &apos;DeskBell&apos;: 0.11539590133977715, &apos;BlowNose&apos;: 0.11539590133977715, &apos;Laugh&apos;: 0.11539590133977715, &apos;RobotNoisePushed&apos;: 0.11539590133977715, &apos;ToyMaracas&apos;: 0.11539590133977715, &apos;ToyGiraffe&apos;: 0.72999999999999998}
confidence coefficients are {&apos;RobotNoiseMoving&apos;: 2.6470588235294117, &apos;ShutDoor&apos;: 1.4285714285714286, &apos;FireAlarmFr&apos;: 7.799237144047235, &apos;ApplauseLight&apos;: 7.799237144047235, &apos;NoisePaper&apos;: 7.799237144047235, &apos;ToyGiraffe&apos;: 1.2328767123287672, &apos;ClapHand&apos;: 1.7307692307692308, &apos;ToyPig&apos;: 1.2328767123287672, &apos;SmokeDetector&apos;: 7.799237144047235, &apos;HumanScratchHead&apos;: 1.4516129032258065, &apos;TacTac&apos;: 1.8750000000000002, &apos;HumanCaressHead&apos;: 1.7647058823529411, &apos;DoorBell01&apos;: 2.727272727272727, &apos;Whistle&apos;: 3.0, &apos;DoorBell02&apos;: 7.799237144047235, &apos;DeskBell&apos;: 7.799237144047235, &apos;BlowNose&apos;: 7.799237144047235, &apos;Laugh&apos;: 7.799237144047235, &apos;RobotNoisePushed&apos;: 7.799237144047235, &apos;ToyMaracas&apos;: 7.799237144047235, &apos;FakeSneeze&apos;: 3.1034482758620694}
ignoring labels [&apos;(romeo speaking)&apos;, &apos;(opening a door)&apos;, &apos;(Opening a door)&apos;, &apos;HumanTapHead&apos;, &apos;ToyChicken&apos;, &apos;NOTHING&apos;], not present in learning dataset
</system-out><system-err>/home/lgeorge/anaconda/lib/python2.7/site-packages/sklearn/cross_validation.py:417: Warning: The least populated class in y has only 1 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
  % (min_labels, self.n_folds)), Warning)
</system-err></testcase><testcase classname="tests.test_successive_detection.TestMultipleDetectionsWithCalibrationEuropythonDatasetFull" name="test_recall" time="0.000810146331787"><failure message="AssertionError: 
Arrays are not less-ordered
labels considered are [&apos;FireAlarmFr&apos;, &apos;ClapHand&apos;, &apos;SmokeDetector&apos;, &apos;TacTac&apos;, &apos;HumanCaressHead&apos;, &apos;DoorBell01&apos;, &apos;FakeSneeze&apos;, &apos;RobotNoisePushed&apos;, &apos;ShutDoor&apos;, &apos;NoisePaper&apos;, &apos;ToyPig&apos;, &apos;HumanScratchHead&apos;, &apos;RobotNoiseMoving&apos;, &apos;DeskBell&apos;, &apos;BlowNose&apos;, &apos;Laugh&apos;, &apos;ToyMaracas&apos;, &apos;ToyGiraffe&apos;] predicted are [&apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FakeSneeze&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FakeSneeze&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;SmokeDetector&apos;], expected are [&apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FakeSneeze&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FakeSneeze&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;BlowNose&apos;, &apos;ClapHand&apos;, &apos;ClapHand&apos;, &apos;DoorBell01&apos;, &apos;HumanCaressHead&apos;, &apos;HumanScratchHead&apos;, &apos;HumanTapHead&apos;, &apos;Laugh&apos;, &apos;NoisePaper&apos;, &apos;RobotNoiseMoving&apos;, &apos;RobotNoisePushed&apos;, &apos;SmokeDetector&apos;, &apos;ShutDoor&apos;, &apos;ShutDoor&apos;, &apos;(Opening a door)&apos;, &apos;ShutDoor&apos;, &apos;TacTac&apos;, &apos;ToyGiraffe&apos;, &apos;ToyPig&apos;, &apos;ClapHand&apos;, &apos;DoorBell01&apos;, &apos;FakeSneeze&apos;, &apos;(romeo speaking)&apos;, &apos;HumanCaressHead&apos;, &apos;HumanScratchHead&apos;, &apos;HumanTapHead&apos;, &apos;Laugh&apos;, &apos;NoisePaper&apos;, &apos;RobotNoiseMoving&apos;, &apos;RobotNoisePushed&apos;, &apos;ShutDoor&apos;, &apos;(opening a door)&apos;, &apos;ShutDoor&apos;, &apos;ShutDoor&apos;, &apos;ShutDoor&apos;, &apos;SmokeDetector&apos;, &apos;TacTac&apos;, &apos;ToyPig&apos;, &apos;ToyGiraffe&apos;, &apos;ToyChicken&apos;, &apos;DoorBell01&apos;, &apos;ToyPig&apos;, &apos;ToyGiraffe&apos;, &apos;ToyMaracas&apos;, &apos;ToyPig&apos;, &apos;ToyChicken&apos;, &apos;DoorBell01&apos;, &apos;ToyPig&apos;, &apos;ShutDoor&apos;, &apos;ToyGiraffe&apos;, &apos;ToyChicken&apos;, &apos;ClapHand&apos;, &apos;NOTHING&apos;]
(mismatch 83.3333333333%)
 x: array(0.7)
 y: array([ 1.      ,  0.      ,  0.      ,  0.      ,  0.      ,  0.      ,
        0.666667,  0.      ,  0.      ,  0.      ,  0.      ,  0.      ,
        0.      ,  1.      ,  0.      ,  0.      ,  0.75    ,  0.      ])">self = &lt;tests.test_successive_detection.TestMultipleDetectionsWithCalibrationEuropythonDatasetFull testMethod=test_recall&gt;

    def test_recall(self):
        # for recall we also ignore labels not present in the test_wav_file
        print(&quot;ignoring labels %s, not present in learning dataset&quot; % str(self.labels_to_ignore))
        print(&quot;considering only labels present in wavfile %s&quot; % str(self.labels_present_in_wavfile))
        labels_to_ignore = self.labels_to_ignore + [label for label in self.labels if label not in self.labels_present_in_wavfile]
        labels_to_consider = [l for l in self.labels if l not in labels_to_ignore]
        labels_to_consider_index = [num for (num, val) in enumerate(self.labels) if val in labels_to_consider]
        # we use assert array less because it provide a pecent mismatch, easier to read.. it&apos;s equivalent to checking all values above min_recall
&gt;       np.testing.assert_array_less(self.min_recall, self.recalls[labels_to_consider_index], &quot;labels considered are {} predicted are {}, expected are {}&quot;.format(self.labels_to_consider, self.predicted, self.expected))

test_successive_detection.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lgeorge/anaconda/lib/python2.7/site-packages/numpy/testing/utils.py:913: in assert_array_less
    header=&apos;Arrays are not less-ordered&apos;)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

comparison = &lt;built-in function __lt__&gt;, x = array(0.7), y = array([ 1.        ,  0.        ,  0.        ,  0.        ,  0.        ,
      ...     ,  1.        ,  0.        ,
        0.        ,  0.75      ,  0.        ])
err_msg = &quot;labels considered are [&apos;FireAlarmFr&apos;, &apos;ClapHand&apos;, &apos;SmokeDetector&apos;, &apos;TacTac&apos;, &apos;HumanCaressHead&apos;, &apos;DoorBell01&apos;, &apos;FakeSn...racas&apos;, &apos;ToyPig&apos;, &apos;ToyChicken&apos;, &apos;DoorBell01&apos;, &apos;ToyPig&apos;, &apos;ShutDoor&apos;, &apos;ToyGiraffe&apos;, &apos;ToyChicken&apos;, &apos;ClapHand&apos;, &apos;NOTHING&apos;]&quot;, verbose = True
header = &apos;Arrays are not less-ordered&apos;, precision = 6

    def assert_array_compare(comparison, x, y, err_msg=&apos;&apos;, verbose=True,
                             header=&apos;&apos;, precision=6):
        from numpy.core import array, isnan, isinf, any, all, inf
        x = array(x, copy=False, subok=True)
        y = array(y, copy=False, subok=True)
    
        def isnumber(x):
            return x.dtype.char in &apos;?bhilqpBHILQPefdgFDG&apos;
    
        def chk_same_position(x_id, y_id, hasval=&apos;nan&apos;):
            &quot;&quot;&quot;Handling nan/inf: check that x and y have the nan/inf at the same
            locations.&quot;&quot;&quot;
            try:
                assert_array_equal(x_id, y_id)
            except AssertionError:
                msg = build_err_msg([x, y],
                                    err_msg + &apos;\nx and y %s location mismatch:&apos; \
                                    % (hasval), verbose=verbose, header=header,
                                    names=(&apos;x&apos;, &apos;y&apos;), precision=precision)
                raise AssertionError(msg)
    
        try:
            cond = (x.shape==() or y.shape==()) or x.shape == y.shape
            if not cond:
                msg = build_err_msg([x, y],
                                    err_msg
                                    + &apos;\n(shapes %s, %s mismatch)&apos; % (x.shape,
                                                                      y.shape),
                                    verbose=verbose, header=header,
                                    names=(&apos;x&apos;, &apos;y&apos;), precision=precision)
                if not cond :
                    raise AssertionError(msg)
    
            if isnumber(x) and isnumber(y):
                x_isnan, y_isnan = isnan(x), isnan(y)
                x_isinf, y_isinf = isinf(x), isinf(y)
    
                # Validate that the special values are in the same place
                if any(x_isnan) or any(y_isnan):
                    chk_same_position(x_isnan, y_isnan, hasval=&apos;nan&apos;)
                if any(x_isinf) or any(y_isinf):
                    # Check +inf and -inf separately, since they are different
                    chk_same_position(x == +inf, y == +inf, hasval=&apos;+inf&apos;)
                    chk_same_position(x == -inf, y == -inf, hasval=&apos;-inf&apos;)
    
                # Combine all the special values
                x_id, y_id = x_isnan, y_isnan
                x_id |= x_isinf
                y_id |= y_isinf
    
                # Only do the comparison if actual values are left
                if all(x_id):
                    return
    
                if any(x_id):
                    val = comparison(x[~x_id], y[~y_id])
                else:
                    val = comparison(x, y)
            else:
                val = comparison(x, y)
    
            if isinstance(val, bool):
                cond = val
                reduced = [0]
            else:
                reduced = val.ravel()
                cond = reduced.all()
                reduced = reduced.tolist()
            if not cond:
                match = 100-100.0*reduced.count(1)/len(reduced)
                msg = build_err_msg([x, y],
                                    err_msg
                                    + &apos;\n(mismatch %s%%)&apos; % (match,),
                                    verbose=verbose, header=header,
                                    names=(&apos;x&apos;, &apos;y&apos;), precision=precision)
                if not cond :
&gt;                   raise AssertionError(msg)
E                   AssertionError: 
E                   Arrays are not less-ordered
E                   labels considered are [&apos;FireAlarmFr&apos;, &apos;ClapHand&apos;, &apos;SmokeDetector&apos;, &apos;TacTac&apos;, &apos;HumanCaressHead&apos;, &apos;DoorBell01&apos;, &apos;FakeSneeze&apos;, &apos;RobotNoisePushed&apos;, &apos;ShutDoor&apos;, &apos;NoisePaper&apos;, &apos;ToyPig&apos;, &apos;HumanScratchHead&apos;, &apos;RobotNoiseMoving&apos;, &apos;DeskBell&apos;, &apos;BlowNose&apos;, &apos;Laugh&apos;, &apos;ToyMaracas&apos;, &apos;ToyGiraffe&apos;] predicted are [&apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FakeSneeze&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FakeSneeze&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;NOTHING&apos;, &apos;SmokeDetector&apos;], expected are [&apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FakeSneeze&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FakeSneeze&apos;, &apos;ToyMaracas&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;DeskBell&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;FireAlarmFr&apos;, &apos;BlowNose&apos;, &apos;ClapHand&apos;, &apos;ClapHand&apos;, &apos;DoorBell01&apos;, &apos;HumanCaressHead&apos;, &apos;HumanScratchHead&apos;, &apos;HumanTapHead&apos;, &apos;Laugh&apos;, &apos;NoisePaper&apos;, &apos;RobotNoiseMoving&apos;, &apos;RobotNoisePushed&apos;, &apos;SmokeDetector&apos;, &apos;ShutDoor&apos;, &apos;ShutDoor&apos;, &apos;(Opening a door)&apos;, &apos;ShutDoor&apos;, &apos;TacTac&apos;, &apos;ToyGiraffe&apos;, &apos;ToyPig&apos;, &apos;ClapHand&apos;, &apos;DoorBell01&apos;, &apos;FakeSneeze&apos;, &apos;(romeo speaking)&apos;, &apos;HumanCaressHead&apos;, &apos;HumanScratchHead&apos;, &apos;HumanTapHead&apos;, &apos;Laugh&apos;, &apos;NoisePaper&apos;, &apos;RobotNoiseMoving&apos;, &apos;RobotNoisePushed&apos;, &apos;ShutDoor&apos;, &apos;(opening a door)&apos;, &apos;ShutDoor&apos;, &apos;ShutDoor&apos;, &apos;ShutDoor&apos;, &apos;SmokeDetector&apos;, &apos;TacTac&apos;, &apos;ToyPig&apos;, &apos;ToyGiraffe&apos;, &apos;ToyChicken&apos;, &apos;DoorBell01&apos;, &apos;ToyPig&apos;, &apos;ToyGiraffe&apos;, &apos;ToyMaracas&apos;, &apos;ToyPig&apos;, &apos;ToyChicken&apos;, &apos;DoorBell01&apos;, &apos;ToyPig&apos;, &apos;ShutDoor&apos;, &apos;ToyGiraffe&apos;, &apos;ToyChicken&apos;, &apos;ClapHand&apos;, &apos;NOTHING&apos;]
E                   (mismatch 83.3333333333%)
E                    x: array(0.7)
E                    y: array([ 1.      ,  0.      ,  0.      ,  0.      ,  0.      ,  0.      ,
E                           0.666667,  0.      ,  0.      ,  0.      ,  0.      ,  0.      ,
E                           0.      ,  1.      ,  0.      ,  0.      ,  0.75    ,  0.      ])

/home/lgeorge/anaconda/lib/python2.7/site-packages/numpy/testing/utils.py:665: AssertionError</failure><system-out>ignoring labels [&apos;(romeo speaking)&apos;, &apos;(opening a door)&apos;, &apos;(Opening a door)&apos;, &apos;HumanTapHead&apos;, &apos;ToyChicken&apos;, &apos;NOTHING&apos;], not present in learning dataset
considering only labels present in wavfile set([&apos;(opening a door)&apos;, &apos;ClapHand&apos;, &apos;HumanCaressHead&apos;, &apos;ShutDoor&apos;, &apos;(Opening a door)&apos;, &apos;NoisePaper&apos;, &apos;HumanTapHead&apos;, &apos;HumanScratchHead&apos;, &apos;RobotNoiseMoving&apos;, &apos;BlowNose&apos;, &apos;ToyMaracas&apos;, &apos;ToyGiraffe&apos;, &apos;FireAlarmFr&apos;, &apos;SmokeDetector&apos;, &apos;TacTac&apos;, &apos;DoorBell01&apos;, &apos;FakeSneeze&apos;, &apos;(romeo speaking)&apos;, &apos;RobotNoisePushed&apos;, &apos;ToyPig&apos;, &apos;DeskBell&apos;, &apos;Laugh&apos;, &apos;ToyChicken&apos;])
</system-out></testcase><testcase classname="tests.test_successive_detection.TestMultipleDetectionsWithCalibrationEuropythonDatasetFull" name="test_setup" time="5.19752502441e-05"/><testcase classname="tests.test_successive_detection.TestMultipleDetectionsWithCalibrationEuropythonDatasetSimpleBell" name="test_precision" time="0.000195980072021"><system-out>CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-025-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-023-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-024-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-025-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-023-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-024-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
Exception fs (44100) != self.fs (48000.0) detected on /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-025-Romeo.wav
Exception fs (44100) != self.fs (48000.0) detected on /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-023-Romeo.wav
Exception fs (44100) != self.fs (48000.0) detected on /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-024-Romeo.wav
CLF is SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel=&apos;rbf&apos;, max_iter=-1, probability=True, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-025-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-023-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
warning file /home/lgeorge/fastSSD/projects/protolab/sound_recognition/recognition_application/tests/dataset_aldebaran_6sounds.tar.gz?dl=0_directory/DeskBell-024-Romeo.wav, wrong fs 44100, using it.. please remove the file if you don&apos;t want
confidence threshold are {&apos;FireAlarmFr&apos;: 0.26000000000000001, &apos;Applause&apos;: 0.24209293853187644, &apos;TacTac&apos;: 0.83999999999999997, &apos;DoorBell01&apos;: 0.60999999999999999, &apos;Whistle&apos;: 0.69000000000000006, &apos;DoorBell02&apos;: 0.24209293853187644, &apos;DeskBell&apos;: 0.33000000000000002}
confidence coefficients are {&apos;FireAlarmFr&apos;: 3.4615384615384617, &apos;Applause&apos;: 3.717580551741276, &apos;TacTac&apos;: 1.0714285714285714, &apos;DoorBell01&apos;: 1.4754098360655739, &apos;Whistle&apos;: 1.3043478260869565, &apos;DoorBell02&apos;: 3.717580551741276, &apos;DeskBell&apos;: 2.727272727272727}
ignoring labels [], not present in learning dataset
</system-out></testcase><testcase classname="tests.test_successive_detection.TestMultipleDetectionsWithCalibrationEuropythonDatasetSimpleBell" name="test_recall" time="0.000169038772583"><system-out>ignoring labels [], not present in learning dataset
considering only labels present in wavfile set([&apos;DeskBell&apos;])
</system-out></testcase><testcase classname="tests.test_successive_detection.TestMultipleDetectionsWithCalibrationEuropythonDatasetSimpleBell" name="test_setup" time="4.6968460083e-05"/></testsuite>